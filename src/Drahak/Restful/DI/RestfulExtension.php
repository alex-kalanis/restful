<?php

namespace Drahak\Restful\DI;

use Drahak\Restful\IResource;
use Nette;
use Nette\Configurator;
use Nette\DI\CompilerExtension;
use Nette\DI\ContainerBuilder;
use Nette\DI\ServiceDefinition;
use Nette\DI\Statement;
use Nette\Diagnostics\Debugger;
use Nette\Utils\Validators;

if (!class_exists(\Nette\DI\CompilerExtension::class)) {
    class_alias('Nette\Config\CompilerExtension', \Nette\DI\CompilerExtension::class);
    class_alias('Nette\Config\Compiler', \Nette\DI\Compiler::class);
    class_alias('Nette\Config\Helpers', \Nette\DI\Config\Helpers::class);
}

if (isset(Nette\Loaders\NetteLoader::getInstance()->renamed[\Nette\Configurator::class]) || !class_exists(\Nette\Configurator::class)) {
    unset(Nette\Loaders\NetteLoader::getInstance()->renamed[\Nette\Configurator::class]);
    class_alias('Nette\Config\Configurator', \Nette\Configurator::class);
}

/**
 * Drahak RestfulExtension
 * @package Drahak\Restful\DI
 * @author Drahomír Hanák
 */
class RestfulExtension extends CompilerExtension
{

    /** Converter tag name */
    public const CONVERTER_TAG = 'restful.converter';

    /** Snake case convention config name */
    public const CONVENTION_SNAKE_CASE = 'snake_case';

    /** Camel case convention config name */
    public const CONVENTION_CAMEL_CASE = 'camelCase';

    /** Pascal case convention config name */
    public const CONVENTION_PASCAL_CASE = 'PascalCase';

    /**
     * Default DI settings
     * @var array
     */
    protected $defaults = ['convention' => NULL, 'timeFormat' => 'c', 'cacheDir' => '%tempDir%/cache', 'jsonpKey' => 'jsonp', 'prettyPrint' => TRUE, 'prettyPrintKey' => 'pretty', 'routes' => ['generateAtStart' => FALSE, 'presentersRoot' => '%appDir%', 'autoGenerated' => TRUE, 'autoRebuild' => TRUE, 'module' => '', 'prefix' => '', 'panel' => TRUE], 'security' => ['privateKey' => NULL, 'requestTimeKey' => 'timestamp', 'requestTimeout' => 300]];

    /**
     * Register REST API extension
     */
    public static function install(Configurator $configurator)
    {
        $configurator->onCompile[] = function ($configurator, $compiler): void {
            $compiler->addExtension('restful', new RestfulExtension);
        };
    }

    /**
     * Load DI configuration
     */
    public function loadConfiguration()
    {
        $container = $this->getContainerBuilder();
        $config = $this->getConfig();

        // Additional module
        $this->loadRestful($container, $config);
        $this->loadValidation($container, $config);
        $this->loadResourceConverters($container, $config);
        $this->loadSecuritySection($container, $config);
        if ($config['routes']['autoGenerated']) $this->loadAutoGeneratedRoutes($container, $config);
        if ($config['routes']['panel']) $this->loadResourceRoutePanel($container, $config);
    }

    /**
     * @param $config
     */
    private function loadRestful(ContainerBuilder $container, $config)
    {
        Validators::assert($config['prettyPrintKey'], 'string');

        $container->addDefinition($this->prefix('responseFactory'))
            ->setClass(\Drahak\Restful\Application\ResponseFactory::class)
            ->addSetup('$service->setJsonp(?)', [$config['jsonpKey']])
            ->addSetup('$service->setPrettyPrintKey(?)', [$config['prettyPrintKey']])
            ->addSetup('$service->setPrettyPrint(?)', [$config['prettyPrint']]);

        $container->addDefinition($this->prefix('resourceFactory'))
            ->setClass(\Drahak\Restful\ResourceFactory::class);
        $container->addDefinition($this->prefix('resource'))
            ->setFactory($this->prefix('@resourceFactory') . '::create');

        $container->addDefinition($this->prefix('methodOptions'))
            ->setClass(\Drahak\Restful\Application\MethodOptions::class);

        // Mappers
        $container->addDefinition($this->prefix('xmlMapper'))
            ->setClass(\Drahak\Restful\Mapping\XmlMapper::class);
        $container->addDefinition($this->prefix('jsonMapper'))
            ->setClass(\Drahak\Restful\Mapping\JsonMapper::class);
        $container->addDefinition($this->prefix('queryMapper'))
            ->setClass(\Drahak\Restful\Mapping\QueryMapper::class);
        $container->addDefinition($this->prefix('dataUrlMapper'))
            ->setClass(\Drahak\Restful\Mapping\DataUrlMapper::class);
        $container->addDefinition($this->prefix('nullMapper'))
            ->setClass(\Drahak\Restful\Mapping\NullMapper::class);

        $container->addDefinition($this->prefix('mapperContext'))
            ->setClass(\Drahak\Restful\Mapping\MapperContext::class)
            ->addSetup('$service->addMapper(?, ?)', [IResource::XML, $this->prefix('@xmlMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::JSON, $this->prefix('@jsonMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::JSONP, $this->prefix('@jsonMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::QUERY, $this->prefix('@queryMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::DATA_URL, $this->prefix('@dataUrlMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::FILE, $this->prefix('@nullMapper')])
            ->addSetup('$service->addMapper(?, ?)', [IResource::NULL, $this->prefix('@nullMapper')]);

        if (isset($config['mappers'])) {
            foreach ($config['mappers'] as $mapperName => $mapper) {
                $container->addDefinition($this->prefix($mapperName))
                    ->setClass($mapper['class']);

                $container->getDefinition($this->prefix('mapperContext'))
                    ->addSetup('$service->addMapper(?, ?)', [$mapper['contentType'], $this->prefix('@' . $mapperName)]);
            }
        }

        // Input & validation
        $container->addDefinition($this->prefix('inputFactory'))
            ->setClass(\Drahak\Restful\Http\InputFactory::class);

        // Http
        $container->addDefinition($this->prefix('httpResponseFactory'))
            ->setClass(\Drahak\Restful\Http\ResponseFactory::class);

        $container->addDefinition($this->prefix('httpRequestFactory'))
            ->setClass(\Drahak\Restful\Http\ApiRequestFactory::class);

        $container->getDefinition('httpRequest')
            ->setFactory($this->prefix('@httpRequestFactory') . '::createHttpRequest');

        $container->getDefinition('httpResponse')
            ->setFactory($this->prefix('@httpResponseFactory') . '::createHttpResponse');

        $container->addDefinition($this->prefix('requestFilter'))
            ->setClass(\Drahak\Restful\Utils\RequestFilter::class)
            ->setArguments(['@httpRequest', [$config['jsonpKey'], $config['prettyPrintKey']]]);

        $container->addDefinition($this->prefix('methodHandler'))
            ->setClass(\Drahak\Restful\Application\Events\MethodHandler::class);

        $container->getDefinition('application')
            ->addSetup('$service->onStartup[] = ?', [[$this->prefix('@methodHandler'), 'run']])
            ->addSetup('$service->onError[] = ?', [[$this->prefix('@methodHandler'), 'error']]);
    }

    /**
     * @param $config
     */
    private function loadValidation(ContainerBuilder $container, $config)
    {
        $container->addDefinition($this->prefix('validator'))
            ->setClass(\Drahak\Restful\Validation\Validator::class);

        $container->addDefinition($this->prefix('validationScopeFactory'))
            ->setClass(\Drahak\Restful\Validation\ValidationScopeFactory::class);

        $container->addDefinition($this->prefix('validationScope'))
            ->setClass(\Drahak\Restful\Validation\ValidationScope::class)
            ->setFactory($this->prefix('@validationScopeFactory') . '::create');

    }

    /**
     * @param $config
     */
    private function loadResourceConverters(ContainerBuilder $container, $config)
    {
        Validators::assert($config['timeFormat'], 'string');

        // Default used converters
        $container->addDefinition($this->prefix('objectConverter'))
            ->setClass(\Drahak\Restful\Converters\ObjectConverter::class)
            ->addTag(self::CONVERTER_TAG);
        $container->addDefinition($this->prefix('dateTimeConverter'))
            ->setClass(\Drahak\Restful\Converters\DateTimeConverter::class)
            ->setArguments([$config['timeFormat']])
            ->addTag(self::CONVERTER_TAG);

        // Other available converters
        $container->addDefinition($this->prefix('camelCaseConverter'))
            ->setClass(\Drahak\Restful\Converters\CamelCaseConverter::class);
        $container->addDefinition($this->prefix('pascalCaseConverter'))
            ->setClass(\Drahak\Restful\Converters\PascalCaseConverter::class);
        $container->addDefinition($this->prefix('snakeCaseConverter'))
            ->setClass(\Drahak\Restful\Converters\SnakeCaseConverter::class);

        // Determine which converter to use if any
        if ($config['convention'] === self::CONVENTION_SNAKE_CASE) {
            $container->getDefinition($this->prefix('snakeCaseConverter'))
                ->addTag(self::CONVERTER_TAG);
        } else if ($config['convention'] === self::CONVENTION_CAMEL_CASE) {
            $container->getDefinition($this->prefix('camelCaseConverter'))
                ->addTag(self::CONVERTER_TAG);
        } else if ($config['convention'] === self::CONVENTION_PASCAL_CASE) {
            $container->getDefinition($this->prefix('pascalCaseConverter'))
                ->addTag(self::CONVERTER_TAG);
        }

        // Load converters by tag
        $container->addDefinition($this->prefix('resourceConverter'))
            ->setClass(\Drahak\Restful\Converters\ResourceConverter::class);
    }

    /**
     * @param array $config
     */
    private function loadSecuritySection(ContainerBuilder $container, $config)
    {
        $container->addDefinition($this->prefix('security.hashCalculator'))
            ->setClass(\Drahak\Restful\Security\HashCalculator::class)
            ->addSetup('$service->setPrivateKey(?)', [$config['security']['privateKey']]);

        $container->addDefinition($this->prefix('security.hashAuthenticator'))
            ->setClass(\Drahak\Restful\Security\Authentication\HashAuthenticator::class)
            ->setArguments([$config['security']['privateKey']]);
        $container->addDefinition($this->prefix('security.timeoutAuthenticator'))
            ->setClass(\Drahak\Restful\Security\Authentication\TimeoutAuthenticator::class)
            ->setArguments([$config['security']['requestTimeKey'], $config['security']['requestTimeout']]);

        $container->addDefinition($this->prefix('security.nullAuthentication'))
            ->setClass(\Drahak\Restful\Security\Process\NullAuthentication::class);
        $container->addDefinition($this->prefix('security.securedAuthentication'))
            ->setClass(\Drahak\Restful\Security\Process\SecuredAuthentication::class);
        $container->addDefinition($this->prefix('security.basicAuthentication'))
            ->setClass(\Drahak\Restful\Security\Process\BasicAuthentication::class);

        $container->addDefinition($this->prefix('security.authentication'))
            ->setClass(\Drahak\Restful\Security\AuthenticationContext::class)
            ->addSetup('$service->setAuthProcess(?)', [$this->prefix('@security.nullAuthentication')]);

        // enable OAuth2 in Restful
        if ($this->getByType($container, \Drahak\OAuth2\KeyGenerator::class)) {
            $container->addDefinition($this->prefix('security.oauth2Authentication'))
                ->setClass(\Drahak\Restful\Security\Process\OAuth2Authentication::class);
        }
    }

    /**
     * @param string $type
     * @return ServiceDefinition|null
     */
    private function getByType(ContainerBuilder $container, $type)
    {
        $definitionas = $container->getDefinitions();
        foreach ($definitionas as $definition) {
            if ($definition->class === $type) {
                return $definition;
            }
        }
        return NULL;
    }

    /**
     * @param array $config
     */
    private function loadAutoGeneratedRoutes(ContainerBuilder $container, $config)
    {
        $container->addDefinition($this->prefix('routeAnnotation'))
            ->setClass(\Drahak\Restful\Application\RouteAnnotation::class);

        $container->addDefinition($this->prefix('routeListFactory'))
            ->setClass(\Drahak\Restful\Application\RouteListFactory::class)
            ->setArguments([$config['routes']['presentersRoot'], $config['routes']['autoRebuild'], $config['cacheDir']])
            ->addSetup('$service->setModule(?)', [$config['routes']['module']])
            ->addSetup('$service->setPrefix(?)', [$config['routes']['prefix']]);

        $container->addDefinition($this->prefix('cachedRouteListFactory'))
            ->setClass(\Drahak\Restful\Application\CachedRouteListFactory::class)
            ->setArguments([$config['routes']['presentersRoot'], $this->prefix('@routeListFactory')]);

        $statement = new Statement('offsetSet', [NULL, new Statement($this->prefix('@cachedRouteListFactory') . '::create')]);
        if ($config['routes']['generateAtStart']) {
            $setup = $container->getDefinition('router')
                ->getSetup();
            array_unshift($setup, $statement);
            $container->getDefinition('router')
                ->setSetup($setup);
        } else {
            $container->getDefinition('router')
                ->addSetup($statement);
        }
    }

    /**
     * @param array $config
     */
    private function loadResourceRoutePanel(ContainerBuilder $container, $config)
    {
        $container->addDefinition($this->prefix('panel'))
            ->setClass(\Drahak\Restful\Diagnostics\ResourceRouterPanel::class)
            ->setArguments([$config['security']['privateKey'], $config['security']['requestTimeKey'] ?? 'timestamp'])
            ->addSetup('Nette\Diagnostics\Debugger::getBar()->addPanel(?)', ['@self']);

        $container->getDefinition('application')
            ->addSetup('$service->onStartup[] = ?', [[$this->prefix('@panel'), 'getTab']]);
    }

    /**
     * Before compile
     */
    public function beforeCompile()
    {
        $container = $this->getContainerBuilder();
        $config = $this->getConfig();

        $resourceConverter = $container->getDefinition($this->prefix('resourceConverter'));
        $services = $container->findByTag(self::CONVERTER_TAG);

        foreach ($services as $service => $args) {
            $resourceConverter->addSetup('$service->addConverter(?)', ['@' . $service]);
        }
    }

}
